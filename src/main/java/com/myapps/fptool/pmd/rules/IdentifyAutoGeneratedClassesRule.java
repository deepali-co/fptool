package com.myapps.fptool.pmd.rules;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;
import java.util.stream.Collectors;

import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;

import net.sourceforge.pmd.RuleContext;
import net.sourceforge.pmd.lang.java.ast.ASTClassOrInterfaceDeclaration;
import net.sourceforge.pmd.lang.java.ast.ASTCompilationUnit;
import net.sourceforge.pmd.lang.java.ast.ASTTypeDeclaration;
import net.sourceforge.pmd.lang.java.ast.Comment;
import net.sourceforge.pmd.lang.java.rule.documentation.AbstractCommentRule;
import net.sourceforge.pmd.lang.rule.properties.StringMultiProperty;

public class IdentifyAutoGeneratedClassesRule extends AbstractCommentRule {
	private static final List<String> autoGeneratedTerms = new ArrayList<>();
	private static final String[] AUTO_GEN = { "auto generated", "auto-generated", "autogenerated", "@generated",
			"@auto-generated", "@autogenerated" };
	private String[] origAutoGeneratedTerms;
	private List<String> currAutoGeneratedTerms;

	static {
		try {
			PropertiesConfiguration config = new PropertiesConfiguration("PMDSettings.properties");
			autoGeneratedTerms.addAll(config.getList("autoGeneratedTerm", Collections.emptyList()).stream()
					.map(autoGeneratedTerm -> autoGeneratedTerm.toString()).collect(Collectors.toList()));
		} catch (ConfigurationException e) {
			e.printStackTrace();
		}
	}

	public static final StringMultiProperty AUTO_GEN_TERMS_DESCRIPTOR = new StringMultiProperty("autoGeneratedTerms",
			"Identify auto generated classes", AUTO_GEN, 3.0f, '|');

	public static final StringMultiProperty AUTO_GEN_TERMS_DESCRIPTOR_1 = new StringMultiProperty("autoGeneratedTerms",
			"Identify auto generated classes", autoGeneratedTerms.toArray(new String[0]), 3.0f, '|');

	public IdentifyAutoGeneratedClassesRule() {
		definePropertyDescriptor(AUTO_GEN_TERMS_DESCRIPTOR_1);
	}

	@Override
	public Object visit(ASTCompilationUnit decl, Object data) {
		if (currAutoGeneratedTerms == null) {
			start(null);
		}
		for (Comment comment : decl.getComments()) {
			checkCommentMeetsRequirement(decl, comment, data);
		}
		return super.visit(decl, data);
	}

	private boolean checkCommentMeetsRequirement(ASTCompilationUnit decl, Comment comment, Object data) {
		if (currAutoGeneratedTerms.isEmpty() || comment == null) {
			return false;
		}
		ASTClassOrInterfaceDeclaration classDecl = decl.getFirstChildOfType(ASTTypeDeclaration.class)
				.getFirstChildOfType(ASTClassOrInterfaceDeclaration.class);
		if (comment.getBeginLine() > classDecl.getBeginLine()) {
			return false;
		}
		final String commentText = comment.getImage().toUpperCase(Locale.ROOT);
		final String packageName = decl.getPackageDeclaration().getPackageNameImage();

		List<String> foundWords = new ArrayList<>();
		final int size = currAutoGeneratedTerms.size();
		for (int i = 0; i < size; i++) {
			if (commentText.contains(currAutoGeneratedTerms.get(i))) {
				foundWords.add(origAutoGeneratedTerms[i]);
			}
		}
		final boolean found = !foundWords.isEmpty();
		if (found) {
			addViolationWithMessage(data, decl, reportMsgFor(foundWords, packageName + "." + classDecl.getImage()),
					comment.getBeginLine(), comment.getEndLine());
		}
		return found;
	}

	private String reportMsgFor(List<String> foundWords, String className) {
		StringBuilder msg = new StringBuilder(getMessage()).append(": ");

		msg.append("Class with auto-generated terms ['");
		msg.append(String.join("', '", foundWords));
		msg.append("\'] found: ");
		msg.append(className);

		return msg.toString();
	}

	@Override
	public void start(RuleContext ctx) {
		origAutoGeneratedTerms = getProperty(AUTO_GEN_TERMS_DESCRIPTOR_1);
		currAutoGeneratedTerms = new ArrayList<>();
		for (String term : origAutoGeneratedTerms) {
			currAutoGeneratedTerms.add(term.toUpperCase(Locale.ROOT));
		}
	}

	@Override
	public void end(RuleContext ctx) {
		// can be implemented
	}
}
